openapi: 3.0.3
info:
  title: Banking Application API
  description: REST API for One Project One Month Banking Application.
  version: 1.0.0
servers:
  - url: /api/v1
paths:
  # ------------------- AUTHENTICATION TAG -------------------
  /auth/pre/send-otp:
    post:
      tags: [Authentication]
      summary: Send OTP to email during registration
      operationId: sendOtpForRegistration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: test@example.com
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Email already exists. Try login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/pre/change-email:
    post:
      tags: [Authentication]
      summary: Change registration email and resend OTP
      operationId: changeRegistrationEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: OTP sent successfully
        '400':
          description: Email already exists. Try login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/pre/resend-otp:
    post:
      tags: [Authentication]
      summary: Resend OTP code
      operationId: resendOtp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: OTP resent successfully

  /auth/register/template:
    get:
      tags: [Authentication]
      summary: Get registration template (gender options)
      operationId: getRegistrationTemplate
      responses:
        '200':
          description: Template data
          content:
            application/json:
              schema:
                type: object
                properties:
                  genderOptions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        name:
                          type: string

  /auth/register:
    post:
      tags: [Authentication]
      summary: Register a new user (pending approval)
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [fullName, dateOfBirth, genderId, email]
              properties:
                fullName:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
                genderId:
                  type: integer
                email:
                  type: string
                  format: email
      responses:
        '200':
          description: User registered (pending approval)
        '400':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/login:
    post:
      tags: [Authentication]
      summary: Login with username and password
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  fullName: { type: string }
                  dateOfBirth: { type: string, format: date }
                  genderId: { type: integer }
                  email: { type: string }
                  accessToken: { type: string }
                  refreshToken: { type: string }
        '401':
          description: Invalid username or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /auth/verify:
    post:
      tags: [Authentication]
      summary: Verify user email
      operationId: verifyUserEmail
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
            format: email
      requestBody:
        required: false
        content:
          application/json: {}
      responses:
        '200':
          description: User verified successfully
        '400':
          description: Invalid or expired verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  # ------------------- USER TAG -------------------
  /user/change-password:
    patch:
      tags: [User]
      summary: Change user password
      operationId: changeUserPassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
      responses:
        '200':
          description: Password updated successfully
        '400':
          description: Invalid password format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized (missing/invalid token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/set-pin:
    patch:
      tags: [User]
      summary: Set 6-digit user PIN
      operationId: setUserPin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPin:
                  type: integer
                  example: 123456
      responses:
        '200':
          description: PIN set successfully
        '400':
          description: Invalid PIN format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user/me:
    get:
      tags: [User]
      summary: Get current user info
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  fullName: { type: string }
                  dateOfBirth: { type: string, format: date }
                  genderId: { type: integer }
                  email: { type: string }
                  accessToken: { type: string }
                  refreshToken: { type: string }
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users:
    post:
      tags:
      - User
      summary: Create a new user
      operationId: createUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequestDto'
      responses:
        '200':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUser'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - User
      summary: Get all users
      operationId: getAllUsers
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUserList'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - User
      summary: Get a user by ID
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUser'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - User
      summary: Update an existing user
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequestDto'
      responses:
        '200':
          description: Updated user details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUser'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - User
      summary: Delete a user
      operationId: deleteUser
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseMessage'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/change-status/template:
    get:
      tags: [User]
      summary: Get user status options for changing status
      operationId: getUserStatusTemplate
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Template data for user status
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Template data retrieved successfully
                  data:
                    type: object
                    properties:
                      statusOptions:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: approved
  /users/{id}/change-status:
    patch:
      tags: [User]
      summary: Change a user's status (e.g., approve, reject)
      operationId: changeUserStatus
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeUserStatusRequestDto'
      responses:
        '200':
          description: User status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseUser'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # ------------------- ORGANIZATION TAG -------------------
  /organizations:
    post:
      tags:
      - Organization
      summary: Create a new organization
      operationId: createOrganization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequestDto'
      responses:
        '200':
          description: Organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseOrganization'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - Organization
      summary: Get all organizations
      operationId: getAllOrganizations
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseOrganizationList'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /organizations/{id}:
    get:
      tags:
        - Organization
      summary: Get an organization by ID
      operationId: getOrganization
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseOrganization'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Organization
      summary: Update an existing organization
      operationId: updateOrganization
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequestDto'
      responses:
        '200':
          description: Updated organization details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseOrganization'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Organization
      summary: Delete an organization
      operationId: deleteOrganization
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Organization deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseMessage'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'  
  # ------------------- FAQ TAG -------------------
  /faqs/template:
    get:
      tags: [FAQ]
      summary: Get FAQ template data (e.g., categories)
      operationId: getFaqTemplate
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Template data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  categoryOptions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: General
  /faqs:
    post:
      tags:
      - FAQ
      summary: Create a new FAQ
      operationId: createFaq
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFaqRequestDto'
      responses:
        '200':
          description: FAQ created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseFaq'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - FAQ
      summary: Get all FAQs
      operationId: getAllFaqs
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of FAQs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseFaqList'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /faqs/{id}:
    get:
      tags:
        - FAQ
      summary: Get an FAQ by ID
      operationId: getFaq
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: FAQ details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseFaq'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - FAQ
      summary: Update an existing FAQ
      operationId: updateFaq
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFaqRequestDto'
      responses:
        '200':
          description: Updated FAQ details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseFaq'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - FAQ
      summary: Delete an FAQ
      operationId: deleteFaq
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: FAQ deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseMessage'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  # ------------------- DEPOSIT TRANSACTION TAG -------------------
  /deposit/template:
    get:
      tags: [Deposit Transaction]
      summary: Get deposit template data (e.g., account types)
      operationId: getDepositTemplate
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Template data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Template data retrieved successfully
                  data:
                    type: object
                    properties:
                      accountTypeOptions:
                        type: array
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Savings Account
  /deposit:
    post:
      tags: [Deposit Transaction]
      summary: Create a new manual deposit transaction
      operationId: createDeposit
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDepositRequestDto'
      responses:
        '200':
          description: Deposit transaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDeposit'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags: [Deposit Transaction]
      summary: Get all deposit transactions
      operationId: getAllDeposits
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of deposit transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDepositList'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /deposit/{id}:
    get:
      tags: [Deposit Transaction]
      summary: Get a deposit transaction by ID
      operationId: getDeposit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deposit transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDeposit'
        '404':
          description: Deposit transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags: [Deposit Transaction]
      summary: Update an existing deposit transaction
      operationId: updateDeposit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDepositRequestDto'
      responses:
        '200':
          description: Updated deposit transaction details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseDeposit'
        '404':
          description: Deposit transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags: [Deposit Transaction]
      summary: Delete a deposit transaction
      operationId: deleteDeposit
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Deposit transaction deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponseMessage'
        '404':
          description: Deposit transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    # -------------------- REQUEST DTOs (User) --------------------
    CreateUserRequestDto:
      type: object
      required: [fullName, dateOfBirth, genderId, email]
      properties:
        fullName:
          type: string
          example: John Doe
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-15'
        genderId:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: john.doe@example.com
    UpdateUserRequestDto:
      type: object
      required: [fullName, dateOfBirth, genderId, email]
      properties:
        fullName:
          type: string
          example: Johnathan Doe
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-15'
        genderId:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: johnathan.doe@example.com
    # -------------------- CORE DTO (User) --------------------
    UserResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 101
        fullName:
          type: string
          example: John Doe
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-15'
        genderId:
          type: integer
          example: 1
        email:
          type: string
          format: email
          example: john.doe@example.com
        createdAt:
          type: string
          format: date-time
          example: '2025-09-26T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-09-26T11:00:00Z'
    ChangeUserStatusRequestDto:
      type: object
      required: [statusId]
      properties:
        statusId:
          type: integer
          example: 1
    # -------------------- WRAPPER RESPONSES (User) --------------------
    SuccessResponseUser:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: User retrieved successfully
        data:
          $ref: '#/components/schemas/UserResponseDto'
    SuccessResponseUserList:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Users retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/UserResponseDto'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            total:
              type: integer
              example: 100
            pageSize:
              type: integer
              example: 10
    # -------------------- REQUEST DTOs (Organization) --------------------
    CreateOrganizationRequestDto:
      type: object
      required: [name, shortcode, address, country, createdBy]
      properties:
        name:
          type: string
          example: Corporate Bank Ltd.
        shortcode:
          type: string
          example: CBL
        address:
          type: string
          example: 123 Bank Street, Yangon
        country:
          type: string
          example: Myanmar
        createdBy:
          type: integer
          format: int64
          example: 1001
    UpdateOrganizationRequestDto:
      type: object
      required: [name, shortcode, address, country, updatedBy]
      properties:
        name:
          type: string
          example: Corporate Bank Ltd. Updated
        shortcode:
          type: string
          example: CBLU
        address:
          type: string
          example: 456 New Bank Street, Mandalay
        country:
          type: string
          example: Myanmar
        updatedBy:
          type: integer
          format: int64
          example: 2002

    # -------------------- CORE DTO (Organization) --------------------
    OrganizationResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Corporate Bank Ltd.
        shortcode:
          type: string
          example: CBL
        address:
          type: string
          example: 123 Bank Street, Yangon
        country:
          type: string
          example: Myanmar
        createdAt:
          type: string
          format: date-time
          example: '2025-09-25T14:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-09-25T16:30:00Z'
        createdBy:
          type: integer
          format: int64
          example: 1001
        updatedBy:
          type: integer
          format: int64
          example: 2002

    # -------------------- WRAPPER RESPONSES (Organization) --------------------
    SuccessResponseOrganization:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Organization retrieved successfully
        data:
          $ref: '#/components/schemas/OrganizationResponseDto'

    SuccessResponseOrganizationList:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Organizations retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/OrganizationResponseDto'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            total:
              type: integer
              example: 50
            pageSize:
              type: integer
              example: 10
    # -------------------- REQUEST DTOs (FAQ) --------------------
    CreateFaqRequestDto:
      type: object
      required: [question, answer, categoryId]
      properties:
        question:
          type: string
          example: What is the minimum deposit amount?
        answer:
          type: string
          example: The minimum deposit amount is $10.
        categoryId:
          type: integer
          example: 1
    UpdateFaqRequestDto:
      type: object
      required: [question, answer, categoryId]
      properties:
        question:
          type: string
          example: What is the minimum initial deposit amount?
        answer:
          type: string
          example: The minimum initial deposit amount is $10 for all account types.
        categoryId:
          type: integer
          example: 1
    # -------------------- CORE DTO (FAQ) --------------------
    FaqResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        question:
          type: string
          example: What is the minimum deposit amount?
        answer:
          type: string
          example: The minimum deposit amount is $10.
        category:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: General
        createdAt:
          type: string
          format: date-time
          example: '2025-09-27T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-09-27T11:00:00Z'
    # -------------------- WRAPPER RESPONSES (FAQ) --------------------
    SuccessResponseFaq:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: FAQ retrieved successfully
        data:
          $ref: '#/components/schemas/FaqResponseDto'
    SuccessResponseFaqList:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: FAQs retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/FaqResponseDto'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            total:
              type: integer
              example: 60
            pageSize:
              type: integer
              example: 10
    # -------------------- REQUEST DTOs (Deposit) --------------------
    CreateDepositRequestDto:
      type: object
      required: [accountTypeId, accountNumber, name, amount]
      properties:
        accountTypeId:
          type: integer
          example: 1
        accountNumber:
          type: string
          example: "0123456789"
        name:
          type: string
          example: "John Doe"
        amount:
          type: number
          format: double
          example: 150.75
        note:
          type: string
          example: "Monthly savings deposit"
    UpdateDepositRequestDto:
      type: object
      required: [accountTypeId, accountNumber, name, amount]
      properties:
        accountTypeId:
          type: integer
          example: 1
        accountNumber:
          type: string
          example: "0123456789"
        name:
          type: string
          example: "John Doe"
        amount:
          type: number
          format: double
          example: 200.00
        note:
          type: string
          example: "Updated monthly savings deposit"
    # -------------------- CORE DTO (Deposit) --------------------
    DepositResponseDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        accountType:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: Savings Account
        accountNumber:
          type: string
          example: "0123456789"
        name:
          type: string
          example: "John Doe"
        amount:
          type: number
          format: double
          example: 150.75
        note:
          type: string
          example: "Monthly savings deposit"
        createdAt:
          type: string
          format: date-time
          example: '2025-09-28T10:00:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-09-28T11:00:00Z'
    # -------------------- WRAPPER RESPONSES (Deposit) --------------------
    SuccessResponseDeposit:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Deposit transaction retrieved successfully
        data:
          $ref: '#/components/schemas/DepositResponseDto'
    SuccessResponseDepositList:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Deposit transactions retrieved successfully
        data:
          type: array
          items:
            $ref: '#/components/schemas/DepositResponseDto'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            total:
              type: integer
              example: 60
            pageSize:
              type: integer
              example: 10
    # -------------------- GENERIC WRAPPERS --------------------
    SuccessResponseMessage:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Organization deleted successfully
        data:
          type: object
          example: {}

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          example: 403
        message:
          type: string
          example: Forbidden

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
